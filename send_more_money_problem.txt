(defn ! digits (number ((apply ~) digits)))

(defn with-each-n-comb (dict num l f) (if (= num 0) (f l) (each (fn (key) (do
    (push l key) (del dict key) (with-each-n-comb dict (1- num) l f) (def dict key t) (pop l)
)) (keys dict))))

(defq digits (hash))

(each (fn (i) (def digits i t)) (range 0 10))

(with-each-n-comb digits 8 [] (fn ((s e n d m o r y))
    (if (= (+ (! s e n d) (! m o r e)) (! m o n e y))
        (puts (join [s e n d \+ m o r e \= m o n e y] ' ')))))

'
note: you can list and filter by s and m not being 0 if you want,
or you can put that in the filtering function.

outputs (in a surprisingly short time):
2 8 1 7 + 0 3 6 8 = 0 3 1 8 5
2 8 1 9 + 0 3 6 8 = 0 3 1 8 7
3 7 1 2 + 0 4 6 7 = 0 4 1 7 9
3 7 1 9 + 0 4 5 7 = 0 4 1 7 6
3 8 2 9 + 0 4 5 8 = 0 4 2 8 7
3 8 2 1 + 0 4 6 8 = 0 4 2 8 9
5 7 3 1 + 0 6 4 7 = 0 6 3 7 8
5 7 3 2 + 0 6 4 7 = 0 6 3 7 9
5 8 4 9 + 0 6 3 8 = 0 6 4 8 7
6 8 5 1 + 0 7 3 8 = 0 7 5 8 9
6 8 5 3 + 0 7 2 8 = 0 7 5 8 1
6 4 1 5 + 0 7 3 4 = 0 7 1 4 9
6 4 1 9 + 0 7 2 4 = 0 7 1 4 3
6 5 2 4 + 0 7 3 5 = 0 7 2 5 9
7 3 1 6 + 0 8 2 3 = 0 8 1 3 9
7 4 2 9 + 0 8 1 4 = 0 8 2 4 3
7 5 3 4 + 0 8 2 5 = 0 8 3 5 9
7 5 3 9 + 0 8 1 5 = 0 8 3 5 4
7 5 3 1 + 0 8 2 5 = 0 8 3 5 6
7 6 4 9 + 0 8 1 6 = 0 8 4 6 5
7 6 4 3 + 0 8 2 6 = 0 8 4 6 9
8 3 2 4 + 0 9 1 3 = 0 9 2 3 7
8 4 3 2 + 0 9 1 4 = 0 9 3 4 6
8 5 4 2 + 0 9 1 5 = 0 9 4 5 7
9 5 6 7 + 1 0 8 5 = 1 0 6 5 2
'